<?php

namespace Basalam;

use Basalam\Auth\BaseAuth;
use Basalam\Chat\ChatService;
use Basalam\Config\Config;
use Basalam\Core\CoreService;
use Basalam\Exceptions\BasalamException;
use Basalam\Order\OrderService;
use Basalam\OrderProcessing\OrderProcessingService;
use Basalam\Search\SearchService;
use Basalam\Upload\UploadService;
use Basalam\Wallet\WalletService;
use Basalam\Webhook\WebhookService;

/**
 * Main client for interacting with the Basalam API.
 *
 * This client provides access to all Basalam services through a unified interface.
 * It automatically configures and instantiates service-specific clients.
 *
 * You can access service methods in two ways:
 * 1. Through service attributes: $client->webhook->getWebhooks()
 * 2. Directly from client: $client->getWebhooks()
 *
 *
 * AUTO-GENERATED: This documentation is auto-generated by scripts/generate_phpdoc.php
 * Run 'make generate-docs' to regenerate after adding new methods.
 *
 * Service Properties:
 * @property \Basalam\Core\CoreService $core Core service for vendor/product management
 * @property \Basalam\Wallet\WalletService $wallet Wallet service for balance and transactions
 * @property \Basalam\Order\OrderService $order Order service for baskets and payments
 * @property \Basalam\OrderProcessing\OrderProcessingService $orderProcessing Order processing service
 * @property \Basalam\Search\SearchService $search Search service for product search
 * @property \Basalam\Upload\UploadService $upload Upload service for file uploads
 * @property \Basalam\Chat\ChatService $chat Chat service for messaging
 * @property \Basalam\Webhook\WebhookService $webhook Webhook service for webhook management
 *
 * CoreService Methods:
 * @method \Basalam\Core\Models\ProductListResponse getVendorProducts(int $vendorId, ?\Basalam\Core\Models\GetVendorProductsSchema $queryParams = null) * Get vendor products
 * @method \Basalam\Core\Models\PublicVendorResponse createVendor(int $userId, \Basalam\Core\Models\CreateVendorSchema $request) * Create a new vendor
 * @method \Basalam\Core\Models\PublicVendorResponse updateVendor(int $vendorId, \Basalam\Core\Models\UpdateVendorSchema $request) * Update vendor
 * @method \Basalam\Core\Models\PublicVendorResponse|\Basalam\Core\Models\PrivateVendorResponse getVendor(int $vendorId, ?string $prefer = 'return=minimal') * Get vendor details
 * @method \Basalam\Core\Models\ResultResponse createVendorMobileChangeConfirmation(int $vendorId, \Basalam\Core\Models\ChangeVendorMobileConfirmSchema $request) * Create vendor mobile change confirmation
 * @method \Basalam\Core\Models\ResultResponse createVendorMobileChangeRequest(int $vendorId, \Basalam\Core\Models\ChangeVendorMobileRequestSchema $request) * Create vendor mobile change request
 * @method \Basalam\Core\Models\UpdateVendorStatusResponse updateVendorStatus(int $vendorId, \Basalam\Core\Models\UpdateVendorStatusSchema $request) * Update vendor status
 * @method \Basalam\Core\Models\BulkProductsUpdateResponseSchema createProductsBulkActionRequest(int $vendorId, \Basalam\Core\Models\BulkProductsUpdateRequestSchema $request) * Create products bulk action request
 * @method \Basalam\Core\Models\BulkProductsUpdatesCountResponse getProductsBulkActionRequestsCount(int $vendorId) * Get products bulk action requests count
 * @method \Basalam\Core\Models\BulkProductsUpdatesListResponse getProductsBulkActionRequests(int $vendorId, int $page = 1, int $perPage = 10) * Get products bulk action requests
 * @method \Basalam\Core\Models\ProductListResponse getProducts(?\Basalam\Core\Models\GetProductsQuerySchema $queryParams = null, ?string $prefer = 'return=minimal') * Get products list
 * @method \Basalam\Core\Models\ProductResponseSchema createProduct(int $vendorId, \Basalam\Core\Models\ProductRequestSchema $request, array $photoFiles = [], mixed $videoFile = null) * Create product with optional automatic file upload
 * @method \Basalam\Core\Models\ProductResponseSchema getProduct(int $productId, ?string $prefer = 'return=minimal') * Get product details
 * @method \Basalam\Core\Models\ProductResponseSchema updateProduct(int $productId, \Basalam\Core\Models\ProductRequestSchema $request, array $photoFiles = [], mixed $videoFile = null) * Update product with optional automatic file upload
 * @method \Basalam\Core\Models\ProductResponseSchema updateProductVariation(int $productId, int $variationId, \Basalam\Core\Models\UpdateProductVariationSchema $request) * Update product variation
 * @method \Basalam\Core\Models\UnsuccessfulBulkUpdateProducts getProductsUnsuccessfulBulkActionRequests(int $requestId, int $page = 1, int $perPage = 10) * Get products unsuccessful bulk action requests
 * @method array createDiscount(int $vendorId, \Basalam\Core\Models\CreateDiscountRequestSchema $request) * Create discount for products
 * @method array deleteDiscount(int $vendorId, \Basalam\Core\Models\DeleteDiscountRequestSchema $request) * Delete discount for products
 * @method array getProductShelves(int $productId) * Get product shelves
 * @method array updateBulkProducts(int $vendorId, \Basalam\Core\Models\BatchUpdateProductsRequest|array $request) * Update bulk products
 * @method \Basalam\Core\Models\PrivateUserResponse getCurrentUser() * Get current user info
 * @method \Basalam\Core\Models\PrivateUserResponse updateUserVerification(int $userId, \Basalam\Core\Models\UserVerificationSchema $request) * Update user verification
 * @method \Basalam\Core\Models\ResultResponse createUserMobileChangeRequest(int $userId, \Basalam\Core\Models\ChangeUserMobileRequestSchema $request) * Create user mobile change request
 * @method \Basalam\Core\Models\ResultResponse createUserMobileConfirmationRequest(int $userId) * Create user mobile confirmation request
 * @method \Basalam\Core\Models\ResultResponse verifyUserMobileChangeRequest(int $userId, \Basalam\Core\Models\ChangeUserMobileConfirmSchema $request) * Verify user mobile change request
 * @method \Basalam\Core\Models\ResultResponse verifyUserMobileConfirmationRequest(int $userId, \Basalam\Core\Models\ConfirmCurrentUserMobileConfirmSchema $request) * Verify user mobile confirmation request
 * @method array createUserBankAccount(int $userId, \Basalam\Core\Models\UserCardsSchema $request, ?string $prefer = 'return=minimal') * Create user bank account
 * @method array deleteUserBankAccount(int $userId, int $bankAccountId) * Delete bank account
 * @method array getUserBankAccounts(int $userId, ?string $prefer = 'return=minimal') * Get user bank accounts
 * @method array updateUserBankAccount(int $bankAccountId, \Basalam\Core\Models\UpdateUserBankInformationSchema $request) * Update user bank account
 * @method array verifyUserBankAccount(int $userId, \Basalam\Core\Models\UserVerifyBankInformationSchema $request) * Verify user bank account
 * @method array verifyUserBankAccountOtp(int $userId, \Basalam\Core\Models\UserCardsOtpSchema $request) * Verify user bank account OTP
 * @method \Basalam\Core\Models\ShippingMethodListResponse getShippingMethods(?array $ids = null, ?array $vendorIds = null, int $page = 1, int $perPage = 10, ?string $prefer = null) * Get shipping methods
 * @method array getDefaultShippingMethods() * Get default shipping methods
 * @method array getWorkingShippingMethods(int $vendorId) * Get working shipping methods
 * @method array updateShippingMethods(int $vendorId, \Basalam\Core\Models\UpdateShippingMethodSchema $request) * Update shipping methods
 * @method \Basalam\Core\Models\AttributesResponse getCategoryAttributes(int $categoryId, ?int $productId = null, ?int $vendorId = null, bool $excludeMultiSelects = true) * Get category attributes
 * @method \Basalam\Core\Models\CategoriesResponse getCategories() * Get all categories
 * @method \Basalam\Core\Models\CategoryResponse getCategory(int $categoryId) * Get specific category
 *
 * WalletService Methods:
 * @method \Basalam\Wallet\Models\CanRollbackRefundResponse canRollbackRefund(int $refundReason, int $refundReferenceId, ?int $xOperatorId = null) * Check if a refund can be rolled back.
 * @method \Basalam\Wallet\Models\HistoryPaginationResponse getTransactions(int $userId, int $page = 1, int $perPage = 50, ?int $xOperatorId = null) * Get a user's transaction history.
 * @method \Basalam\Wallet\Models\SpendResponse createExpense(int $userId, \Basalam\Wallet\Models\SpendCreditRequest $request, ?int $xOperatorId = null) * Create an expense from a user's balance.
 * @method \Basalam\Wallet\Models\SpendResponse createExpenseFromCredit(int $userId, int $creditId, \Basalam\Wallet\Models\SpendSpecificCreditRequest $request, ?int $xOperatorId = null) * Create an expense from a specific credit.
 * @method \Basalam\Wallet\Models\SpendResponse deleteExpense(int $userId, int $expenseId, int $rollbackReasonId, ?int $xOperatorId = null) * Delete an expense.
 * @method \Basalam\Wallet\Models\SpendResponse deleteExpenseByRef(int $userId, int $reasonId, int $referenceId, int $rollbackReasonId, ?int $xOperatorId = null) * Delete an expense by reference.
 * @method \Basalam\Wallet\Models\SpendResponse getExpense(int $userId, int $expenseId, ?int $xOperatorId = null) * Get details of a specific expense.
 * @method \Basalam\Wallet\Models\SpendResponse getExpenseByRef(int $userId, int $reasonId, int $referenceId, ?int $xOperatorId = null) * Get expense details by reference.
 * @method \Basalam\Wallet\Models\SpendResponse rollbackRefund(\Basalam\Wallet\Models\RollbackRefundRequest $request, ?int $xOperatorId = null) * Rollback a refund.
 * @method \Basalam\Wallet\Models\SpendResponse|\Basalam\Wallet\Models\CreditCreationResponse createRefund(\Basalam\Wallet\Models\RefundRequest $request, ?int $xOperatorId = null) * Create a refund.
 * @method array getBalance(int $userId, ?array $filters = null, ?int $xOperatorId = null) * Get a user's balances.
 *
 * OrderService Methods:
 * @method array getProductVariationStatus(int $productId) * Get product variation status.
 * @method \Basalam\Order\Models\BasketResponse getBaskets(bool $refresh = false) * Get active baskets.
 * @method array createInvoicePayment(int $invoiceId, \Basalam\Order\Models\CreatePaymentRequestModel $request) * Create payment for an invoice.
 * @method array createPaymentCallback(int $paymentId, \Basalam\Order\Models\PaymentVerifyRequestModel $request) * Create payment callback.
 * @method array getPayableInvoices(int $page, int $perPage) * Get payable invoices.
 * @method array getPaymentCallback(int $paymentId, \Basalam\Order\Models\PaymentCallbackRequestModel $request) * Get payment callback.
 * @method array getUnpaidInvoices(?int $invoiceId = null, ?string $status = null, int $page = 1, int $perPage = 20, string $sort = 'DESC') * Get unpaid invoices.
 *
 * OrderProcessingService Methods:
 * @method \Basalam\OrderProcessing\Models\ParcelsResponse getVendorOrdersParcels(?\Basalam\OrderProcessing\Models\OrderParcelFilter $filters = null) * Get a list of orders parcels.
 * @method \Basalam\OrderProcessing\Models\CustomerItemResponse getCustomerOrderItem(int $itemId) * Get details of a specific order item.
 * @method \Basalam\OrderProcessing\Models\CustomerItemsResponse getCustomerOrderItems(?\Basalam\OrderProcessing\Models\ItemFilter $filters = null) * Get a list of order items.
 * @method \Basalam\OrderProcessing\Models\Order getCustomerOrder(int $orderId) * Get details of a specific order.
 * @method \Basalam\OrderProcessing\Models\OrderStatsResponse getOrdersStats(string $resourceCount, ?int $vendorId = null, ?int $productId = null, ?int $customerId = null, ?string $couponCode = null, ?string $cacheControl = null) * Get order statistics.
 * @method \Basalam\OrderProcessing\Models\OrdersResponse getCustomerOrders(?\Basalam\OrderProcessing\Models\OrderFilter $filters = null) * Get a list of customer orders.
 * @method \Basalam\OrderProcessing\Models\ParcelResponse getOrderParcel(int $parcelId) * Get details of a specific order parcel.
 *
 * SearchService Methods:
 * @method array searchProducts(\Basalam\Search\Models\ProductSearchModel $request) * Search for products.
 *
 * UploadService Methods:
 * @method \Basalam\Upload\Models\FileResponse uploadFile(mixed $file, string $fileType, ?string $customUniqueName = null, ?int $expireMinutes = null) * Upload a file.
 *
 * ChatService Methods:
 * @method \Basalam\Chat\Models\ChatListResponse getChats(\Basalam\Chat\Models\GetChatsRequest $request) * Get chats list
 * @method \Basalam\Chat\Models\CreateChatResponse createChat(\Basalam\Chat\Models\CreateChatRequest $request, ?string $xCreationTags = null, ?string $xUserSession = null, ?string $xClientInfo = null) * Create a chat
 * @method \Basalam\Chat\Models\GetMessagesResponse getMessages(\Basalam\Chat\Models\GetMessagesRequest $request) * Get messages from a chat
 * @method \Basalam\Chat\Models\MessageResponse createMessage(\Basalam\Chat\Models\MessageRequest $request, ?string $userAgent = null, ?string $xClientInfo = null) * Create a message
 *
 * WebhookService Methods:
 * @method \Basalam\Webhook\Models\ClientListResource getWebhookCustomers(?int $page = 1, ?int $perPage = 10, ?int $webhookId = null) * Get a list of webhook customers.
 * @method \Basalam\Webhook\Models\ClientResource registerWebhook(\Basalam\Webhook\Models\RegisterClientRequest $request) * Register a client to a webhook.
 * @method \Basalam\Webhook\Models\DeleteWebhookResponse deleteWebhook(int $webhookId) * Delete a webhook.
 * @method \Basalam\Webhook\Models\EventListResource getWebhookEvents() * Get a list of webhook events.
 * @method \Basalam\Webhook\Models\ServiceListResource getWebhookServices() * Get a list of webhook services.
 * @method \Basalam\Webhook\Models\ServiceResource createWebhookService(\Basalam\Webhook\Models\CreateServiceRequest $request) * Create a new webhook service.
 * @method \Basalam\Webhook\Models\UnRegisterClientResponse unregisterWebhook(\Basalam\Webhook\Models\UnRegisterClientRequest $request) * Unregister a customer from a webhook.
 * @method \Basalam\Webhook\Models\WebhookListResource getWebhooks(?int $serviceId = null, ?string $eventIds = null) * Get a list of webhooks.
 * @method \Basalam\Webhook\Models\WebhookLogListResource getWebhookLogs(int $webhookId) * Get logs for a webhook.
 * @method \Basalam\Webhook\Models\WebhookRegisteredOnListResource getRegisteredWebhooks(?int $page = 1, ?int $perPage = 10, ?int $serviceId = null) * Get webhooks that the customer is registered on.
 * @method \Basalam\Webhook\Models\WebhookResource createWebhook(\Basalam\Webhook\Models\CreateWebhookRequest $request) * Create a new webhook.
 * @method \Basalam\Webhook\Models\WebhookResource updateWebhook(int $webhookId, \Basalam\Webhook\Models\UpdateWebhookRequest $request) * Update a webhook.
 *
 */
class BasalamClient
{
    /**
     * @var CoreService Core service client
     */
    public CoreService $core;
    /**
     * @var WalletService Wallet service client
     */
    public WalletService $wallet;
    /**
     * @var OrderService Order service client
     */
    public OrderService $order;
    /**
     * @var OrderProcessingService Order processing service client
     */
    public OrderProcessingService $orderProcessing;
    /**
     * @var SearchService Search service client
     */
    public SearchService $search;
    /**
     * @var UploadService Upload service client
     */
    public UploadService $upload;
    /**
     * @var ChatService Chat service client
     */
    public ChatService $chat;
    /**
     * @var WebhookService Webhook service client
     */
    public WebhookService $webhook;
    /**
     * @var BaseAuth Authentication instance
     */
    private BaseAuth $auth;
    /**
     * @var Config Configuration instance
     */
    private Config $config;
    /**
     * @var array Service clients for dynamic method lookup
     */
    private array $services;

    /**
     * Initialize the client.
     *
     * @param BaseAuth $auth Authentication instance
     * @param Config|null $config Configuration instance
     */
    public function __construct(BaseAuth $auth, ?Config $config = null)
    {
        $this->auth = $auth;
        $this->config = $config ?? new Config();

        // Initialize service clients
        $this->core = new CoreService($auth, $this->config);
        $this->wallet = new WalletService($auth, $this->config);
        $this->order = new OrderService($auth, $this->config);
        $this->orderProcessing = new OrderProcessingService($auth, $this->config);
        $this->search = new SearchService($auth, $this->config);
        $this->upload = new UploadService($auth, $this->config);
        $this->chat = new ChatService($auth, $this->config);
        $this->webhook = new WebhookService($auth, $this->config);

        // Store services for dynamic method lookup
        $this->services = [
            $this->core,
            $this->wallet,
            $this->order,
            $this->orderProcessing,
            $this->search,
            $this->upload,
            $this->chat,
            $this->webhook,
        ];
    }

    /**
     * Dynamically delegate method calls to the appropriate service.
     *
     * This allows calling service methods directly from the client:
     * $client->getWebhooks() instead of $client->webhook->getWebhooks()
     *
     *
     * @param string $name The method name being called
     * @param array $arguments The arguments passed to the method
     * @return mixed The result from the service method
     * @throws \BadMethodCallException If the method is not found in any service
     */
    public function __call(string $name, array $arguments)
    {
        // Search through all services for the method
        foreach ($this->services as $service) {
            if (method_exists($service, $name)) {
                return call_user_func_array([$service, $name], $arguments);
            }
        }

        // If method not found in any service, raise error.
        throw new \BadMethodCallException(
            sprintf("'%s' object has no attribute '%s'", static::class, $name)
        );
    }

    /**
     * Check if the client has a specific scope.
     *
     * @param string $scope The scope to check (can use Scope class constants)
     * @return bool True if the scope is granted
     */
    public function hasScope(string $scope): bool
    {
        return $this->auth->hasScope($scope);
    }

    /**
     * Get the list of granted scopes.
     *
     * @return array List of granted scope strings
     */
    public function getGrantedScopes(): array
    {
        return $this->auth->getGrantedScopes();
    }

    /**
     * Refresh the authentication token.
     *
     * This is useful when you need to explicitly refresh the token
     * before making a series of requests.
     *
     * Note: PHP doesn't have async, so this is always synchronous.
     *
     * @return void
     * @throws BasalamException If token refresh fails
     */
    public function refreshAuthToken(): void
    {
        $this->auth->refreshToken();
    }

    /**
     * Get the current auth instance.
     *
     * This is a PHP-specific helper method for accessing the auth object.
     *
     * @return BaseAuth
     */
    public function getAuth(): BaseAuth
    {
        return $this->auth;
    }

    /**
     * Get the current config instance.
     *
     * This is a PHP-specific helper method for accessing the config object.
     *
     * @return Config
     */
    public function getConfig(): Config
    {
        return $this->config;
    }

    /**
     * Property getter magic method to access service clients.
     *
     * This allows convenient property access in PHP:
     * $client->core instead of $client->getCore()
     *
     * @param string $name Property name
     * @return mixed
     * @throws \Exception If property doesn't exist
     */
    public function __get(string $name)
    {
        // Check if it's a known service property
        $serviceMap = [
            'core' => $this->core,
            'wallet' => $this->wallet,
            'order' => $this->order,
            'order_processing' => $this->orderProcessing,  // Support underscore version
            'orderProcessing' => $this->orderProcessing,   // Support camelCase version
            'search' => $this->search,
            'upload' => $this->upload,
            'chat' => $this->chat,
            'webhook' => $this->webhook,
        ];

        if (isset($serviceMap[$name])) {
            return $serviceMap[$name];
        }

        throw new \Exception(sprintf("Property '%s' does not exist", $name));
    }

    /**
     * Check if a property exists.
     *
     * @param string $name Property name
     * @return bool
     */
    public function __isset(string $name): bool
    {
        $serviceNames = [
            'core', 'wallet', 'order', 'orderProcessing', 'order_processing',
            'search', 'upload', 'chat', 'webhook'
        ];

        return in_array($name, $serviceNames, true);
    }
}